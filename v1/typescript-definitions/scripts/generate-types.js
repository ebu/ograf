const { compile, compileFromFile } = require("json-schema-to-typescript");
const path = require("path");
const fs = require("fs");

async function main() {


  const outputPath = path.resolve("./src/generated");
  const schemaPath = path.resolve("../specification/json-schemas/graphics");
  const options = {
    bannerComment: `/* eslint-disable */
/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND! Instead, modify the source JSON Schema file,
* and run 'npm run generate-types' to regenerate this file.
*/`,
    customName: (schema, name) => {
      // console.log("name", name, schema);
      return undefined;
    },
  };

  // Compile JSON schemas to TypeScript types:
  await saveFile(
    path.join(outputPath, "graphics-manifest.ts"),
    await compileFromFile(
      path.join(schemaPath, "schema.json"),
      options
    )
  );
  // await saveFile(
  //   path.join(outputPath, "renderer-manifest.d.ts"),
  //   await compileFromFile(
  //     path.join(schemaPath, "renderer-manifest/schema.json"),
  //     options
  //   )
  // );

  console.log(`Generated types at: ${outputPath}`);
}
async function saveFile(savePath, contents) {
  // Ensure the folder exists:
  await fs.promises.mkdir(path.dirname(savePath), { recursive: true });

  // The ^v_.* are generated as [k: string]: unknown, fix that:
  contents = contents.replaceAll(/(v_.+\n.*\n[ \t]+)(\[k: string\]: unknown)/g, '$1[k: `v_${string}`]: unknown')


  // Replace contents in case of using localhost during testing:
  contents = contents.replaceAll('HttpLocalhost8080', 'HttpsOgrafEbuIo')
  contents = contents.replaceAll('Http1270018081V1', 'HttpsOgrafEbuIoV1')

  await fs.promises.writeFile(savePath, contents);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
