/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns information about the server */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Name of the server
                             * @example My Ograf Server
                             */
                            name: string;
                            /**
                             * @description Longer description of the server
                             * @example This server handles graphics for the main news shows
                             */
                            description?: string;
                            /** @description Information about the author/manufacturer of the Server */
                            author?: components["schemas"]["Author"];
                            /**
                             * @description Version of the Server
                             * @example 1.0
                             */
                            version?: string;
                            /**
                             * @description Server uptime (in milliseconds)
                             * @example 3600000
                             */
                            uptime?: number;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/graphics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List graphics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a list of available OGraf Graphics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            graphics: components["schemas"]["GraphicInfo"][];
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/graphics/{graphicId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve info about a graphic */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the graphic to retrieve */
                    graphicId: components["schemas"]["GraphicId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns info of an OGraf Graphic */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            graphic: components["schemas"]["GraphicInfo"];
                            manifest: components["schemas"]["schema-2"];
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic found with the given ID and version */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GraphicNotFoundResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a graphic */
        delete: {
            parameters: {
                query?: {
                    /** @description Whether to force deletion. If force is false, it is recommended that the server keeps the Graphic contents for a while, but unlist it. This is to ensure that any currently-on-air Graphics are not affected. */
                    force?: boolean;
                };
                header?: never;
                path: {
                    /** @description ID of the graphic to delete */
                    graphicId: components["schemas"]["GraphicId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Graphic deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description No Graphic found with the given ID and version */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GraphicNotFoundResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Renderers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a list of available Renderers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            renderers: ({
                                id: components["schemas"]["RendererId"];
                                name: components["schemas"]["RendererInfo"]["name"];
                                description?: components["schemas"]["RendererInfo"]["description"];
                            } & {
                                [key: string]: unknown;
                            })[];
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve info about a renderer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns info of a Renderer */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            renderer: components["schemas"]["RendererInfo"];
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Renderer found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieve info about a RenderTarget */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to retrieve info about */
                        renderTarget?: components["schemas"]["RenderTargetIdentifier"];
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Returns info of a Renderer */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            renderTarget: components["schemas"]["RenderTargetInfo"];
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/customActions/{customActionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invoke a CustomAction on a Renderer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                    /**
                     * @description ID of the CustomAction to be invoked
                     * @example shake-it
                     */
                    customActionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Payload to send into the CustomAction
                         * @example {
                         *       "foo": "bar"
                         *     }
                         */
                        payload: unknown;
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description CustomAction successfully executed, returning result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Yes, I did it! */
                            result?: unknown;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Renderer found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Clear (remove) Graphic(s) from one (or more) RenderTargets */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        filters: components["schemas"]["GraphicFilter"];
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Graphic successfully loaded */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClearGraphicsResponse"];
                    };
                };
                /** @description No Renderer found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/load": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Load a Graphic onto a RenderTarget */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to load the graphic onto */
                        renderTarget: components["schemas"]["RenderTargetIdentifier"];
                        /** @description The graphic to load */
                        graphicId: components["schemas"]["GraphicId"];
                        /** @description Params to send to the load() method of the graphic */
                        params: {
                            /**
                             * @description Data to send to the load() method of the graphic
                             * @example { "name": "John Doe" }
                             */
                            data: unknown;
                        } & {
                            [key: string]: unknown;
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Graphic successfully loaded, returns GraphicInstanceId of the loaded graphic */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique ID of the instance of the graphic that was just loaded */
                            graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                            /**
                             * @description Returned by the load() method
                             * @example 200
                             */
                            statusCode: number;
                            /**
                             * @description Returned by the load() method
                             * @example Loaded OK
                             */
                            statusMessage?: string;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic or RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error or load() threw an error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/updateAction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** For Graphic(s) at a RenderTarget: Call the updateAction() method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to target with the command */
                        renderTarget: components["schemas"]["RenderTargetIdentifier"];
                        /** @description The Graphic to target with the command */
                        graphicTarget: components["schemas"]["GraphicTarget"];
                        params: components["schemas"]["UpdateActionParams"];
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description updateAction() successfully executed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique ID of the affected GraphicInstance */
                            graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                            /**
                             * @description Returned by the updateAction() method
                             * @example 200
                             */
                            statusCode: number;
                            /** @description Returned by the updateAction() method */
                            statusMessage?: string;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic or RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error or updateAction() threw an error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/playAction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** For Graphic(s) at a RenderTarget: Call the playAction() method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to target with the command */
                        renderTarget: components["schemas"]["RenderTargetIdentifier"];
                        /** @description The Graphic to target with the command */
                        graphicTarget: components["schemas"]["GraphicTarget"];
                        params: components["schemas"]["PlayActionParams"];
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description playAction() successfully executed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique ID of the affected GraphicInstance */
                            graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                            /**
                             * @description Returned by the playAction() method
                             * @example 200
                             */
                            statusCode: number;
                            /**
                             * @description Returned by the playAction() method
                             * @example Playing!
                             */
                            statusMessage?: string;
                            /**
                             * @description The resulting step from a PlayAction
                             * @example 1
                             */
                            currentStep: number;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic or RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error or playAction() threw an error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/stopAction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** For Graphic(s) at a RenderTarget: Call the stopAction() method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to target with the command */
                        renderTarget: components["schemas"]["RenderTargetIdentifier"];
                        /** @description The Graphic to target with the command */
                        graphicTarget: components["schemas"]["GraphicTarget"];
                        params: components["schemas"]["StopActionParams"];
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description stopAction() successfully executed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique ID of the affected GraphicInstance */
                            graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                            /**
                             * @description Returned by the stopAction() method
                             * @example 200
                             */
                            statusCode: number;
                            /**
                             * @description Returned by the stopAction() method
                             * @example Stopped safely
                             */
                            statusMessage?: string;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic or RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error or stopAction() threw an error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/customAction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** For Graphic(s) at a RenderTarget: Call the customAction() method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to target with the command */
                        renderTarget: components["schemas"]["RenderTargetIdentifier"];
                        /** @description The Graphic to target with the command */
                        graphicTarget: components["schemas"]["GraphicTarget"];
                        params: components["schemas"]["CustomActionParams"];
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description customAction() successfully executed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique ID of the affected GraphicInstance */
                            graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                            /**
                             * @description Returned by the customAction() method
                             * @example 200
                             */
                            statusCode: number;
                            /**
                             * @description Returned by the customAction() method
                             * @example Highlighting
                             */
                            statusMessage?: string;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic or RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error or customAction() threw an error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/goToTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** For Graphic(s) at a RenderTarget: Call the goToTime() method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to target with the command */
                        renderTarget: components["schemas"]["RenderTargetIdentifier"];
                        /** @description The Graphic to target with the command */
                        graphicTarget: components["schemas"]["GraphicTarget"];
                        /** @description Params to send to the goToTime() method of the graphic */
                        params: {
                            /**
                             * @description The timestamp to go to
                             * @example 1234
                             */
                            timestamp: number;
                        } & {
                            [key: string]: unknown;
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description goToTime() successfully executed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique ID of the affected GraphicInstance */
                            graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                            /**
                             * @description Returned by the goToTime() method
                             * @example 200
                             */
                            statusCode: number;
                            /**
                             * @description Returned by the goToTime() method
                             * @example Jumped to 1234
                             */
                            statusMessage?: string;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic or RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error or goToTime() threw an error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/renderers/{rendererId}/target/graphic/setActionsSchedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** For Graphic(s) at a RenderTarget: Call the setActionsSchedule() method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the Renderer */
                    rendererId: components["schemas"]["RendererId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The RenderTarget to target with the command */
                        renderTarget: components["schemas"]["RenderTargetIdentifier"];
                        /** @description The Graphic to target with the command */
                        graphicTarget: components["schemas"]["GraphicTarget"];
                        /** @description Params to send to the setActionsSchedule() method of the graphic */
                        params: {
                            /**
                             * @description A list of the scheduled actions to call at certain points in time
                             * @example [ { "timestamp": 1234, "action": { "type": "updateAction", "params": { "foo": "bar" } } } ]
                             */
                            schedule: ({
                                /**
                                 * @description The timestamp to go to
                                 * @example 1234
                                 */
                                timestamp: number;
                                action: ({
                                    type: string;
                                    params: components["schemas"]["UpdateActionParams"];
                                } & {
                                    [key: string]: unknown;
                                }) | ({
                                    type: string;
                                    params: components["schemas"]["PlayActionParams"];
                                } & {
                                    [key: string]: unknown;
                                }) | ({
                                    type: string;
                                    params: components["schemas"]["StopActionParams"];
                                } & {
                                    [key: string]: unknown;
                                }) | ({
                                    type: string;
                                    params: components["schemas"]["CustomActionParams"];
                                } & {
                                    [key: string]: unknown;
                                });
                            } & {
                                [key: string]: unknown;
                            })[];
                        } & {
                            [key: string]: unknown;
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description setActionsSchedule() successfully executed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique ID of the affected GraphicInstance */
                            graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                            /**
                             * @description Returned by the setActionsSchedule() method
                             * @example 200
                             */
                            statusCode: number;
                            /**
                             * @description Returned by the setActionsSchedule() method
                             * @example Schedule set
                             */
                            statusMessage?: string;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description No Graphic or RenderTarget found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundResponse"];
                    };
                };
                /** @description Internal Server Error or setActionsSchedule() threw an error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /** @example Internal Server Error */
            error: string;
            /** @example Error at /path/to/file.js:123:45 */
            stack?: string;
        } & {
            [key: string]: unknown;
        };
        NotFoundResponse: {
            /** @example Not found */
            error: string;
        } & {
            [key: string]: unknown;
        };
        GraphicNotFoundResponse: {
            /** @example Graphic not found */
            error: string;
        } & {
            [key: string]: unknown;
        };
        ClearGraphicsResponse: {
            /** @description A list of the GraphicInstances that were cleared */
            graphicInstances: ({
                /** @description ID of the RenderTarget that the graphic was cleared from */
                renderTarget: components["schemas"]["RenderTargetIdentifier"];
                /** @description Unique ID of the instance of the graphic that was just cleared */
                graphicInstanceId: components["schemas"]["GraphicInstanceId"];
                /** @description The graphic that was cleared */
                graphic: {
                    /** @description ID of the graphic that was cleared */
                    id: components["schemas"]["GraphicId"];
                } & {
                    [key: string]: unknown;
                };
            } & {
                [key: string]: unknown;
            })[];
        } & {
            [key: string]: unknown;
        };
        /** @description If set, apply filters to which GraphicInstances to affect. If no filters are defined, ALL graphics will be cleared. If multiple filters are defined, only instances that match all filters will be affected. */
        GraphicFilter: {
            /** @description (Optional) If set, will only affect GraphicInstances from a certain RenderTarget */
            renderTarget?: components["schemas"]["RenderTargetIdentifier"];
            /** @description (Optional) If set, will only affect GraphicInstances of a certain Graphic id */
            graphicId?: components["schemas"]["GraphicId"];
            /** @description (Optional) If set, will only affect a specific GraphicInstance */
            graphicInstanceId?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description If set, apply filters to which GraphicInstances to affect. If no filters are defined, ALL graphics will be cleared. If multiple filters are defined, only instances that match all filters will be affected. */
        GraphicTarget: {
            /** @description (Optional) If set, will only affect GraphicInstances of a certain Graphic id and version */
            graphicId?: components["schemas"]["GraphicId"];
            /** @description (Optional) If set, will only affect a specific GraphicInstance */
            graphicInstanceId?: components["schemas"]["GraphicInstanceId"];
        } & {
            [key: string]: unknown;
        };
        /**
         * @description ID of the Renderer
         * @example renderer-0
         */
        RendererId: string;
        /**
         * @description Identifier of a RenderTarget. The type of this is defined by the renderTarget schema of a Renderer.
         * @example "layer-0" or { "bank": 1, "layer": 14 }
         */
        RenderTargetIdentifier: unknown;
        /**
         * @description ID of the Ograf Graphic
         * @example simple-l3rd
         */
        GraphicId: string;
        /**
         * @description ID of the GraphicInstance
         * @example graphic-instance-0
         */
        GraphicInstanceId: string;
        /** GraphicInfo */
        GraphicInfo: {
            id: components["schemas"]["GraphicId"];
            /** @description Version of the Graphic */
            version?: string;
            /**
             * @description Short name of the graphic
             * @example Simple LowerThird
             */
            name: string;
            /**
             * @description Description of the graphic
             * @example A simple lower third for the Main news show
             */
            description?: string;
            /** @description Information about the author of the graphic */
            author?: components["schemas"]["Author"];
            /**
             * @description Unix timestamp of when the Graphic was created
             * @example 1735689600000
             */
            created?: number;
            /**
             * @description Unix timestamp of when the Graphic was last modified
             * @example 1735689600000
             */
            modified?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description OGraf manifest, see https://ograf.ebu.io/v1-draft-0/specification/json-schemas/graphics/schema.json */
        GraphicManifest: components["schemas"]["schema-2"];
        /** RendererInfo */
        RendererInfo: {
            id: components["schemas"]["RendererId"];
            /**
             * @description Short name of the renderer
             * @example My Renderer
             */
            name: string;
            /**
             * @description Description of the renderer
             * @example A simple, layer-based renderer
             */
            description?: string;
            /** @description Custom Actions that can be invoked on the Renderer. */
            customActions?: components["schemas"]["action"][];
            renderCharacteristics?: components["schemas"]["RenderCharacteristics"];
            /**
             * @description Schema of the RenderTarget. This is a GDD/JSON-object schema that describes the structure of the RenderTarget identifier. See https://superflytv.github.io/GraphicsDataDefinition
             * @example { "type": "string" } or { "type": "object", "properties": { "bank": { "type": "integer" }, "layer": { "type": "integer" } }, "required": [ "bank", "layer" ] }
             */
            renderTargetSchema?: Record<string, never>;
            /** @description Status of the renderer */
            status: {
                /**
                 * @example OK
                 * @enum {string}
                 */
                status: "OK" | "WARNING" | "ERROR";
                /** @example Renderer is running */
                message?: string;
                /** @description List of active RenderTargets and their contents */
                renderTargets: components["schemas"]["RenderTargetInfo"][];
            } & {
                [key: string]: unknown;
            };
        } & {
            [key: string]: unknown;
        };
        RenderTargetInfo: {
            /** @description Identifier of the RenderTarget */
            renderTarget: components["schemas"]["RenderTargetIdentifier"];
            /**
             * @description Name of the RenderTarget
             * @example Layer 0
             */
            name: string;
            /** @description Longer description of the RenderTarget */
            description?: string;
            /**
             * @example OK
             * @enum {string}
             */
            status: "OK" | "WARNING" | "ERROR";
            /** @example RenderTarget is running */
            statusMessage?: string;
            graphicInstances?: ({
                graphicInstanceId?: components["schemas"]["GraphicInstanceId"];
                graphic?: components["schemas"]["GraphicInfo"];
            } & {
                [key: string]: unknown;
            })[];
        } & {
            [key: string]: unknown;
        };
        RenderCharacteristics: {
            resolution?: {
                /** @example 1920 */
                width: number;
                /** @example 1080 */
                height: number;
            } & {
                [key: string]: unknown;
            };
            /**
             * @description Which frameRate the renderer will be rendering in. Examples: 50, 60, 29.97
             * @example 50
             */
            frameRate?: number;
        } & {
            [key: string]: unknown;
        };
        Author: {
            /** @example John Doe */
            name: string;
            /** @example john.doe@ograf.io */
            email?: string;
            /** @example https://ograf.ebu.io/ */
            url?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Params to send to the updateAction() method of the graphic */
        UpdateActionParams: {
            /**
             * @description Data to send to the updateAction() method of the graphic
             * @example { "name": "John Doe" }
             */
            data: unknown;
        } & {
            [key: string]: unknown;
        };
        /** @description Params to send to the playAction() method of the graphic */
        PlayActionParams: {
            /** @description How far to advance. 1 = next step/segment. (defaults to 1) */
            delta?: number;
            /** @description Jump to a specific step/segment (defaults to undefined) */
            goto?: number;
            /** @description If true, skips animation (defaults to false) */
            skipAnimation?: boolean;
        } & {
            [key: string]: unknown;
        };
        /** @description Params to send to the stopAction() method of the graphic */
        StopActionParams: {
            /** @description If true, skips animation (defaults to false) */
            skipAnimation?: boolean;
        } & {
            [key: string]: unknown;
        };
        /** @description Params to send to the customAction() method of the graphic */
        CustomActionParams: {
            /**
             * @description Action id, as defined by the Graphic manifest
             * @example highlight
             */
            id: string;
            /**
             * @description payload to send into the method
             * @example {
             *       "foo": "bar"
             *     }
             */
            payload: unknown;
        } & {
            [key: string]: unknown;
        };
        /** Format: uri-reference */
        uriReferenceString: string;
        /** Format: uri */
        uriString: string;
        anchorString: string;
        /** Core vocabulary meta-schema */
        core: ({
            $id?: components["schemas"]["uriReferenceString"];
            $schema?: components["schemas"]["uriString"];
            $ref?: components["schemas"]["uriReferenceString"];
            $anchor?: components["schemas"]["anchorString"];
            $dynamicRef?: components["schemas"]["uriReferenceString"];
            $dynamicAnchor?: components["schemas"]["anchorString"];
            $vocabulary?: {
                [key: string]: boolean;
            };
            $comment?: string;
            $defs: {
                anchorString: string;
                /** Format: uri */
                uriString: string;
                /** Format: uri-reference */
                uriReferenceString: string;
            };
        } & {
            [key: string]: unknown;
        }) | boolean;
        schemaArray: unknown[];
        /** Applicator vocabulary meta-schema */
        applicator: ({
            prefixItems?: components["schemas"]["schemaArray"];
            items?: unknown;
            contains?: unknown;
            additionalProperties?: unknown;
            /** @default {} */
            properties: {
                [key: string]: unknown;
            };
            /** @default {} */
            patternProperties: {
                [key: string]: unknown;
            };
            /** @default {} */
            dependentSchemas: {
                [key: string]: unknown;
            };
            propertyNames?: unknown;
            if?: unknown;
            then?: unknown;
            else?: unknown;
            allOf?: components["schemas"]["schemaArray"];
            anyOf?: components["schemas"]["schemaArray"];
            oneOf?: components["schemas"]["schemaArray"];
            not?: unknown;
            $defs: {
                schemaArray: unknown[];
            };
        } & {
            [key: string]: unknown;
        }) | boolean;
        /** Unevaluated applicator vocabulary meta-schema */
        unevaluated: ({
            unevaluatedItems?: unknown;
            unevaluatedProperties?: unknown;
        } & {
            [key: string]: unknown;
        }) | boolean;
        /** @enum {unknown} */
        simpleTypes: "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
        nonNegativeInteger: number;
        /** @default [] */
        stringArray: string[];
        /** Validation vocabulary meta-schema */
        validation: ({
            type?: components["schemas"]["simpleTypes"] | components["schemas"]["simpleTypes"][];
            const?: unknown;
            enum?: unknown[];
            multipleOf?: number;
            maximum?: number;
            exclusiveMaximum?: number;
            minimum?: number;
            exclusiveMinimum?: number;
            maxLength?: components["schemas"]["nonNegativeInteger"];
            minLength?: components["schemas"]["nonNegativeInteger"];
            /** Format: regex */
            pattern?: string;
            maxItems?: components["schemas"]["nonNegativeInteger"];
            minItems?: components["schemas"]["nonNegativeInteger"];
            /** @default false */
            uniqueItems: boolean;
            maxContains?: components["schemas"]["nonNegativeInteger"];
            /** @default 1 */
            minContains: components["schemas"]["nonNegativeInteger"];
            maxProperties?: components["schemas"]["nonNegativeInteger"];
            minProperties?: components["schemas"]["nonNegativeInteger"];
            required?: components["schemas"]["stringArray"];
            dependentRequired?: {
                [key: string]: components["schemas"]["stringArray"];
            };
            $defs: {
                nonNegativeInteger: number;
                /** @default 0 */
                nonNegativeIntegerDefault0: $defs["nonNegativeInteger"];
                /** @enum {unknown} */
                simpleTypes: "array" | "boolean" | "integer" | "null" | "number" | "object" | "string";
                /** @default [] */
                stringArray: string[];
            };
        } & {
            [key: string]: unknown;
        }) | boolean;
        /** Meta-data vocabulary meta-schema */
        "meta-data": ({
            title?: string;
            description?: string;
            default?: unknown;
            /** @default false */
            deprecated: boolean;
            /** @default false */
            readOnly: boolean;
            /** @default false */
            writeOnly: boolean;
            examples?: unknown[];
        } & {
            [key: string]: unknown;
        }) | boolean;
        /** Format vocabulary meta-schema for annotation results */
        "format-annotation": ({
            format?: string;
        } & {
            [key: string]: unknown;
        }) | boolean;
        /** Content vocabulary meta-schema */
        content: ({
            contentEncoding?: string;
            contentMediaType?: string;
            contentSchema?: unknown;
        } & {
            [key: string]: unknown;
        }) | boolean;
        /** Core and Validation specifications meta-schema */
        schema: ((({
            /**
             * @deprecated
             * @default {}
             */
            definitions: {
                [key: string]: unknown;
            };
            /**
             * @deprecated
             * @default {}
             */
            dependencies: {
                [key: string]: unknown | components["schemas"]["stringArray"];
            };
            /** @deprecated */
            $recursiveAnchor?: components["schemas"]["anchorString"];
            /** @deprecated */
            $recursiveRef?: components["schemas"]["uriReferenceString"];
        } & {
            [key: string]: unknown;
        }) & (components["schemas"]["core"] & components["schemas"]["applicator"] & components["schemas"]["unevaluated"] & components["schemas"]["validation"] & components["schemas"]["meta-data"] &  components["schemas"]["content"])) | (boolean & (components["schemas"]["core"] & components["schemas"]["applicator"] & components["schemas"]["unevaluated"] & components["schemas"]["validation"] & components["schemas"]["meta-data"] & components["schemas"]["format-annotation"] & components["schemas"]["content"]))) & (components["schemas"]["core"] & components["schemas"]["applicator"] & components["schemas"]["unevaluated"] & components["schemas"]["validation"] & components["schemas"]["meta-data"] & components["schemas"]["format-annotation"] & components["schemas"]["content"]);
        "gdd-types": unknown & unknown & unknown & unknown & unknown & unknown & unknown & unknown & unknown & unknown & unknown & unknown;
        "basic-types": unknown & unknown & unknown & unknown & unknown & unknown;
        object: ({
            /** @enum {string} */
            type: "boolean" | "string" | "number" | "integer" | "array" | "object";
            gddType?: string;
            gddOptions?: Record<string, never>;
        } & {
            [key: string]: unknown;
        }) & (components["schemas"]["schema"] & components["schemas"]["gdd-types"] & components["schemas"]["basic-types"]);
        action: {
            /** @description The identity of the action. The id must be unique within the graphic. */
            id: string;
            /** @description The name of the action. This is displayed to the user. */
            name: string;
            /** @description A longer description of the action. This is displayed to the user. */
            description?: string;
            /** @description The schema of the action. This is used to validate the action parameters as well as auto-generate a GUI for the action. If the action does not require any parameters, set this to null. */
            schema?: components["schemas"]["object"] | null;
        } & {
            [key: string]: unknown;
        };
        /** @description The number constraint is used to specify a constraint for a numerical property. (Inspired by https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#constraindouble) */
        number: {
            /** @description A number specifying the largest permissible value of the property it describes. If the value cannot remain equal to or less than this value, matching will fail. */
            max?: number;
            /** @description A number specifying the smallest permissible value of the property it describes. If the value cannot remain equal to or greater than this value, matching will fail. */
            min?: number;
            /** @description A number specifying a specific, required, value the property must have to be considered acceptable. */
            exact?: number;
            /** @description A number specifying an ideal value for the property. If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match. */
            ideal?: number;
        } & {
            [key: string]: unknown;
        };
        "schema-2": {
            /**
             * @description Reference to the JSON-schema for this manifest
             * @constant
             */
            $schema: "https://ograf.ebu.io/v1-draft-0/specification/json-schemas/graphics/schema.json";
            /** @description The id of the Graphic uniquely identifies it. It is recommended to use a reverse domain name notation. For example: com.my-company.my-lowerthird. */
            id: string;
            /** @description The version of the Graphic. The version SHOULD be alphabetically sortable. Examples: ['0', '1', '2'], ['1.0', '1.1', '1.2'], ['2024-07-01_final', '2024-07-01_final_final2'] */
            version?: string;
            /** @description The main entry point, ie the path to the main javascript file of the Graphic. */
            main?: string;
            /** @description Name of the Graphic */
            name: string;
            /** @description (optional) A longer description of the Graphic */
            description?: string;
            /** @description (optional) About the author */
            author?: {
                /** @description Name of the author */
                name: string;
                /** @description (optional) Email of the author */
                email?: string;
                /** @description (optional) URL of the author */
                url?: string;
            } & {
                [key: string]: unknown;
            };
            /** @description Custom Actions that can be invoked on the Graphic. */
            customActions?: components["schemas"]["action"][];
            /** @description Indicates if the Graphic supports real-time rendering */
            supportsRealTime: boolean;
            /** @description Indicates if the Graphic supports non-real-time rendering. Note: If true, the Graphic must implement the 'goToTime()' and the 'setActionsSchedule()' methods. */
            supportsNonRealTime: boolean;
            /**
             * @description The number of steps in the Graphic. If the Graphic is simply triggered by a play, then a stop, this is considered a stepCount of 1 (defaults to 1).
             * @default 1
             */
            stepCount: number;
            /** @description The schema is used by a Graphic to define the data parameters of the 'update' method. */
            schema?: components["schemas"]["object"];
            /** @description A list of requirements that this Graphic has for the rendering environment. At least one of the requirements must be met for the graphic to be expected to work. */
            renderRequirements?: ({
                /** @description If set, specifies requirements for the resolution of the Renderer. */
                resolution?: {
                    width?: components["schemas"]["number"];
                    height?: components["schemas"]["number"];
                } & {
                    [key: string]: unknown;
                };
                /** @description If set, specifies requirements for frame rate of the Renderer. Example: 60 fps */
                frameRate?: components["schemas"]["number"];
            } & {
                [key: string]: unknown;
            })[];
        } & {
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
